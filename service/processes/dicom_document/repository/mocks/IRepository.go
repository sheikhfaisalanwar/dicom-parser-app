// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	models "dicom-parser-app/service/processes/dicom_document/models"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// CreateDicomDocument provides a mock function with given fields: ctx, doc
func (_m *IRepository) CreateDicomDocument(ctx echo.Context, doc models.DicomFile) (models.DicomFile, error) {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for CreateDicomDocument")
	}

	var r0 models.DicomFile
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, models.DicomFile) (models.DicomFile, error)); ok {
		return rf(ctx, doc)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, models.DicomFile) models.DicomFile); ok {
		r0 = rf(ctx, doc)
	} else {
		r0 = ret.Get(0).(models.DicomFile)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, models.DicomFile) error); ok {
		r1 = rf(ctx, doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDicomDocumentByID provides a mock function with given fields: ctx, id
func (_m *IRepository) GetDicomDocumentByID(ctx echo.Context, id string) (models.DicomFile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDicomDocumentByID")
	}

	var r0 models.DicomFile
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (models.DicomFile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) models.DicomFile); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.DicomFile)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDocuments provides a mock function with given fields: ctx
func (_m *IRepository) ListDocuments(ctx echo.Context) ([]models.DicomFile, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDocuments")
	}

	var r0 []models.DicomFile
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]models.DicomFile, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []models.DicomFile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DicomFile)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDicomDocument provides a mock function with given fields:
func (_m *IRepository) UpdateDicomDocument() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateDicomDocument")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
